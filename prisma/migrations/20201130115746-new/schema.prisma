// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int              @id @default(autoincrement())
  name          String?
  email         String?          @unique
  emailVerified DateTime?        @map(name: "email_verified")
  image         String?
  role          String           @default("user")
  password      String?
  businessName  String?
  asker         ServiceHistory[] @relation("Asker")
  provider      ServiceHistory[] @relation("Provider")
  createdAt     DateTime         @default(now()) @map(name: "created_at")
  updatedAt     DateTime         @default(now()) @map(name: "updated_at")

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Category {
  id          Int             @id @default(autoincrement())
  name        String
  productHead ProductHeader[]
}

model ProductHeader {
  id         Int       @id @default(autoincrement())
  name       String
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId Int
  product    Product[]
}

model Product {
  id            Int                  @id @default(autoincrement())
  name          String
  price         Float?
  short         String?
  long          String?
  videoUrl      String?
  productHead   ProductHeader        @relation(fields: [productHeadId], references: [id])
  productHeadId Int
  faq           Faq[]
  service       ServiceHistory[]
  steps         Steps[]
  document      Documents[]
}

model Faq {
  id        Int      @id @default(autoincrement())
  question  String
  answers   String
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?
}

model Documents {
  id   Int                  @id @default(autoincrement())
  name String?
  desc String?
  product  Product?  @relation(fields: [productId], references: [id])
  productId  Int?
}

model Steps {
  id          Int      @id @default(autoincrement())
  fromDay     Int
  toDay       Int
  description String
  product     Product? @relation(fields: [productId], references: [id])
  productId   Int?
}

model ServiceHistory {
  id         Int      @id @default(autoincrement())
  asker      User     @relation(fields: [askerId], references: [id], "Asker")
  askerId    Int
  provider   User?    @relation(fields: [providerId], references: [id], "Provider")
  providerId Int?
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}
