// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int       @default(autoincrement()) @id
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  role          String    @default("user") 
  password      String?
  businessName  String?
  asker         ServiceHistory[]  @relation("Asker")
  provider      ServiceHistory[]  @relation("Provider")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @default(autoincrement()) @id
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Category {
  id        Int      @default(autoincrement()) @id
  name      String
  product   Product[]
}

model Product {
  id        Int      @default(autoincrement())  @id
  name      String
  price     Float
  category  Category  @relation(fields: [categoryId], references: [id])
  categoryId Int
  profile    ProductProfile?
  faq       Faq[]
  ptd       ProductToDocuments[]
  service   ServiceHistory[]
  steps     Steps[]
}

model ProductProfile {
  id         Int       @default(autoincrement())  @id
  headTitle  String  
  headDesc   String
  bodyTitle  String
  bodyDesc   String
  videoLink  String?
  product    Product?  @relation(fields: [productId], references: [id])
  productId  Int?
}

model Faq {
  id         Int       @default(autoincrement())  @id
  question   String
  answers    String
  product    Product?  @relation(fields: [productId], references: [id])
  productId  Int?
}

model Documents {
  id         Int       @default(autoincrement())  @id
  name       String
  desc       String?
  ptd        ProductToDocuments[]
}

model Steps {
  id        Int       @default(autoincrement())   @id
  fromDay   Int       
  toDay     Int
  description  String
  product     Product?   @relation(fields: [productId], references: [id])
  productId   Int?
}

model ProductToDocuments {
  document   Documents  @relation(fields: [documentId], references: [id])
  documentId  Int
  product    Product    @relation(fields: [productId], references: [id])
  productId   Int
  createdAt   DateTime   @default(now())
  @@id([documentId, productId]) 
}

model ServiceHistory  {
  id        Int       @default(autoincrement())  @id
  asker     User      @relation(fields: [askerId], references: [id], "Asker")
  askerId   Int
  provider  User?      @relation(fields: [providerId], references: [id], "Provider")
  providerId Int?
  product    Product   @relation(fields: [productId], references: [id])
  productId  Int
  status     String    @default("PENDING")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
}